from pathlib import Path

from pydantic import BaseModel, Field, SecretStr, field_validator, model_validator
from pydantic_settings import BaseSettings, SettingsConfigDict


class DatabaseConfig(BaseModel):
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""

    # URL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
    URL: SecretStr

    # –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–≤–∏–∂–∫–∞ SQLAlchemy
    echo: bool = False  # –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å SQL-–∑–∞–ø—Ä–æ—Å—ã (—É–¥–æ–±–Ω–æ –ø—Ä–∏ –æ—Ç–ª–∞–¥–∫–µ)
    future: bool = True  # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–æ–≤–æ–µ API SQLAlchemy (>=1.4)

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    pool_size: int = 10  # –ü–æ—Å—Ç–æ—è–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –≤ –ø—É–ª–µ
    max_overflow: int = 5  # –î–æ–ø. —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å–≤–µ—Ä—Ö pool_size –ø—Ä–∏ –ø–∏–∫–µ
    pool_pre_ping: bool = True  # –ü—Ä–æ–≤–µ—Ä—è—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º (—É—Å—Ç—Ä–∞–Ω—è–µ—Ç –æ—à–∏–±–∫–∏ "MySQL server has gone away")
    pool_recycle: int = 300  # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ X —Å–µ–∫—É–Ω–¥ (—É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∫–æ–Ω–Ω–µ–∫—Ç—ã)
    pool_timeout: int = 30  # –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Å—Å–∏–∏ SQLAlchemy
    auto_commit: bool = False  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π commit (–æ–±—ã—á–Ω–æ False)
    auto_flush: bool = False  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π flush –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–∞–º–∏
    expire_on_commit: bool = False  # –ù–µ –∏–Ω–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –æ–±—ä–µ–∫—Ç—ã –ø–æ—Å–ª–µ commit

    def engine_kwargs(self) -> dict:
        """–°–æ–±–∏—Ä–∞–µ—Ç kwargs –¥–ª—è create_async_engine()."""
        return {
            "echo": self.echo,
            "future": self.future,
            "pool_size": self.pool_size,
            "max_overflow": self.max_overflow,
            "pool_pre_ping": self.pool_pre_ping,
            "pool_recycle": self.pool_recycle,
            "pool_timeout": self.pool_timeout,
        }

    def session_kwargs(self) -> dict:
        """–°–æ–±–∏—Ä–∞–µ—Ç kwargs –¥–ª—è sessionmaker()."""
        return {
            "autocommit": self.auto_commit,
            "autoflush": self.auto_flush,
            "expire_on_commit": self.expire_on_commit,
        }


class MiddlewareConfig(BaseModel):
    allow_credentials: bool = True
    allow_methods: list[str] = ["*"]
    allow_headers: list[str] = ["*"]

    @property
    def allow_origins(self) -> list[str]:
        """–°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö CORS-–∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤."""
        return ["*"] if settings.debug else []

    def cors_kwargs(self) -> dict:
        """–°–æ–±–∏—Ä–∞–µ—Ç kwargs –¥–ª—è add_middleware()."""
        return {
            "allow_origins": self.allow_origins,
            "allow_credentials": self.allow_credentials,
            "allow_methods": self.allow_methods,
            "allow_headers": self.allow_headers,
        }


class TelegramConfig(BaseModel):
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Telegram-–±–æ—Ç–∞."""

    bot_token: SecretStr  # –¢–æ–∫–µ–Ω –±–æ—Ç–∞
    webhook_url: str | None = None  # –ü–æ–ª–Ω—ã–π URL –≤–µ–±—Ö—É–∫–∞ (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
    webhook_secret: str | None = None  # –°–µ–∫—Ä–µ—Ç –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ –≤–µ–±—Ö—É–∫–∞
    webhook_path: str = "/webhook"  # –ü—É—Ç—å –≤–µ–±—Ö—É–∫–∞
    use_webhook: bool = False  # True ‚Äî –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–µ–±—Ö—É–∫–∏, False ‚Äî long polling
    parse_mode: str = "HTML"  # –†–µ–∂–∏–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
    disable_web_page_preview: bool = True  # –û—Ç–∫–ª—é—á–∏—Ç—å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Å—ã–ª–æ–∫
    rate_limit_messages: int = 30  # –ö–æ–ª-–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –æ–∫–Ω–µ
    rate_limit_window: int = 60  # –û–∫–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö


class SecurityConfig(BaseModel):
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏."""

    secret_key: SecretStr  # –ö–ª—é—á –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ JWT –∏ –¥—Ä.
    algorithm: str = "HS256"  # –ê–ª–≥–æ—Ä–∏—Ç–º JWT
    access_token_expire_minutes: int = 30 * 24 * 60  # –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Ç–æ–∫–µ–Ω–∞ (30 –¥–Ω–µ–π)
    bcrypt_rounds: int = 12  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—É–Ω–¥–æ–≤ —Ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª—è


class RedisConfig(BaseModel):
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Redis."""

    url: str = "redis://localhost:6379/0"  # URL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis
    max_connections: int = 20  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    user_cache_ttl: int = 300  # TTL –∫—ç—à–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    order_cache_ttl: int = 60  # TTL –∫—ç—à–∞ –∑–∞–∫–∞–∑–∞


class FileStorageConfig(BaseModel):
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞."""

    upload_dir: Path = Path("uploads")  # –ö–∞—Ç–∞–ª–æ–≥ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
    max_file_size: int = 20 * 1024 * 1024  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (20 –ú–ë)
    allowed_photo_formats: list[str] = [
        "jpg",
        "jpeg",
        "png",
        "webp",
        "heic",
    ]  # –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Ñ–æ—Ç–æ
    max_photo_width: int = 1920  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞ —Ñ–æ—Ç–æ
    max_photo_height: int = 1080  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞ —Ñ–æ—Ç–æ
    photo_quality: int = 85  # –ö–∞—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ –ø—Ä–∏ —Å–∂–∞—Ç–∏–∏


class LoggingConfig(BaseModel):
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è."""

    level: str = "INFO"  # –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    format: str = "%(asctime)s | %(levelname)s | %(name)s | %(message)s"  # –§–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–∫–∏ –ª–æ–≥–∞
    file_format: str = (
        "%(asctime)s | %(levelname)s | %(name)s:%(lineno)d | %(funcName)s | %(message)s"
    )
    telegram_format: str = "%(asctime)s | %(emoji)s %(levelname)s | %(name)s | %(message)s"
    error_format: str = (
        "%(asctime)s | üö® %(levelname)s | %(name)s:%(lineno)d | %(funcName)s\n"
        "Message: %(message)s\n"
        "Path: %(pathname)s\n"
        "%(exc_info)s\n"
        "-" * 80
    )
    date_format: str = "%Y-%m-%d %H:%M:%S"
    file_path: Path | None = None  # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –ª–æ–≥–æ–≤
    max_file_size: int = 20 * 1024 * 1024  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤
    backup_count: int = 5  # –ö–æ–ª-–≤–æ —Ä–æ—Ç–∞—Ü–∏–π
    sqlalchemy_level: str = "WARNING"  # –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–æ–≤ SQLAlchemy
    aiogram_level: str = "INFO"  # –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–æ–≤ aiogram

    def handler_kwargs(self) -> dict:
        return {
            "maxBytes": self.max_file_size,
            "backupCount": self.backup_count,
            "encoding": settings.default_encoding,
        }


class BusinessConfig(BaseModel):
    """–ë–∏–∑–Ω–µ—Å-–ø—Ä–∞–≤–∏–ª–∞ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è."""

    max_orders_per_courier: int = 5  # –ú–∞–∫—Å–∏–º—É–º –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ –∫—É—Ä—å–µ—Ä–∞
    courier_inactive_timeout: int = 3600  # –í—Ä–µ–º—è –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è –∫—É—Ä—å–µ—Ä–∞ (—Å–µ–∫)
    order_auto_cancel_timeout: int = 1800  # –¢–∞–π–º–∞—É—Ç –∞–≤—Ç–æ–æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞
    order_completion_timeout: int = 86400  # –¢–∞–π–º–∞—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
    min_order_price: float = 50.0  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –∑–∞–∫–∞–∑–∞
    max_order_price: float = 10000.0  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –∑–∞–∫–∞–∑–∞
    default_delivery_price: float = 200.0  # –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
    night_delivery_multiplier: float = 1.5  # –ú–Ω–æ–∂–∏—Ç–µ–ª—å –Ω–æ—á–Ω–æ–π –¥–æ—Å—Ç–∞–≤–∫–∏
    work_start_hour: int = 8  # –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    work_end_hour: int = 22  # –ö–æ–Ω–µ—Ü —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    notification_retry_attempts: int = 3  # –ö–æ–ª-–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    notification_retry_delay: int = 30  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ (—Å–µ–∫)


class AdminConfig(BaseModel):
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è."""

    super_admin_telegram_ids: list[int] = []  # –°–ø–∏—Å–æ–∫ ID —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–æ–≤
    admin_panel_url: str | None = None  # URL –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    health_check_interval: int = 300  # –ò–Ω—Ç–µ—Ä–≤–∞–ª health-check (—Å–µ–∫)
    metrics_enabled: bool = True  # –í–∫–ª—é—á–µ–Ω–∞ –ª–∏ –º–µ—Ç—Ä–∏–∫–∞

    @field_validator("super_admin_telegram_ids", mode="before")
    def parse_admin_ids(cls, v):
        """
        –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–æ–≤ —Å—Ç—Ä–æ–∫–æ–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
        (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è).
        """
        if isinstance(v, str):
            return [int(id_str.strip()) for id_str in v.split(",") if id_str.strip().isdigit()]
        return v


class Settings(BaseSettings):
    """–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""

    app_name: str = "Delivery Bot"
    app_version: str = "0.1.0"
    debug: bool = True  # –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏
    environment: str = "development"  # –û–∫—Ä—É–∂–µ–Ω–∏–µ: development/production

    # –í–ª–æ–∂–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥–∏
    database: DatabaseConfig = Field(default_factory=DatabaseConfig)
    middleware: MiddlewareConfig = Field(default_factory=MiddlewareConfig)
    telegram: TelegramConfig = Field(default_factory=TelegramConfig)
    security: SecurityConfig = Field(default_factory=SecurityConfig)
    redis: RedisConfig = Field(default_factory=RedisConfig)
    file_storage: FileStorageConfig = Field(default_factory=FileStorageConfig)
    logging: LoggingConfig = Field(default_factory=LoggingConfig)
    business: BusinessConfig = Field(default_factory=BusinessConfig)
    admin: AdminConfig = Field(default_factory=AdminConfig)

    api_host: str = "localhost"
    api_port: int = 5432
    api_prefix: str = "/api/v1"

    default_encoding: str = "utf-8"

    @property
    def docs_url(self) -> str | None:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç URL –¥–ª—è Swagger UI (docs) —Ç–æ–ª—å–∫–æ –≤ debug."""
        return "/docs" if self.debug else None

    @property
    def redoc_url(self) -> str | None:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç URL –¥–ª—è ReDoc —Ç–æ–ª—å–∫–æ –≤ debug."""
        return "/redoc" if self.debug else None

    @property
    def is_production(self) -> bool:
        """True, –µ—Å–ª–∏ –æ–∫—Ä—É–∂–µ–Ω–∏–µ ‚Äî production."""
        return self.environment == "production"

    @property
    def is_development(self) -> bool:
        """True, –µ—Å–ª–∏ –æ–∫—Ä—É–∂–µ–Ω–∏–µ ‚Äî development."""
        return self.environment == "development"

    @model_validator(mode="after")
    def check_production_settings(self) -> "Settings":
        """
        –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è production.

        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ debug –≤—ã–∫–ª—é—á–µ–Ω –∏ webhook_url —É–∫–∞–∑–∞–Ω, –µ—Å–ª–∏ use_webhook=True.
        """
        if self.environment == "production":
            if self.debug:
                raise ValueError(
                    "DEBUG –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∫–ª—é—á–µ–Ω –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ (environment='production')"
                )
            if self.telegram.use_webhook and not self.telegram.webhook_url:
                raise ValueError("WEBHOOK_URL –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –ø—Ä–∏ use_webhook=True –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ")
        return self

    # –ö–æ–Ω—Ñ–∏–≥ –¥–ª—è pydantic_settings
    model_config = SettingsConfigDict(
        env_file=".env",  # –ó–∞–≥—Ä—É–∂–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
        env_file_encoding=default_encoding,
        env_nested_delimiter="__",  # –î–ª—è –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥–æ–≤ DATABASE__URL
        case_sensitive=False,
    )


# –°–æ–∑–¥–∞—ë–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫
settings = Settings()


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
def get_database_url() -> str:
    return settings.database.URL


def get_bot_token() -> str:
    return settings.telegram.bot_token


def get_redis_url() -> str:
    return settings.redis.url


def is_admin(telegram_id: int) -> bool:
    return telegram_id in settings.admin.super_admin_telegram_ids


def get_upload_dir() -> Path:
    """–ü–æ–ª—É—á–∏—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫. –°–æ–∑–¥–∞—ë—Ç, –µ—Å–ª–∏ –Ω–µ—Ç."""
    upload_dir = settings.file_storage.upload_dir
    upload_dir.mkdir(parents=True, exist_ok=True)
    return upload_dir


# –≠–∫—Å–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤/—Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –∏–º–ø–æ—Ä—Ç–∞
__all__ = [
    "AdminConfig",
    "BusinessConfig",
    "DatabaseConfig",
    "FileStorageConfig",
    "LoggingConfig",
    "RedisConfig",
    "SecurityConfig",
    "Settings",
    "TelegramConfig",
    "get_bot_token",
    "get_database_url",
    "get_redis_url",
    "get_upload_dir",
    "is_admin",
    "settings",
]
