# ==============================================================================
# Project Metadata
# ==============================================================================
# Содержит основную информацию о вашем проекте
[project]
name = "delivery-bot"
version = "0.1.0"
readme = "README.md"
requires-python = ">=3.13"

# Основные зависимости
dependencies = [
    "aiogram>=3.22.0",
    "fastapi>=0.116.1",
    "pydantic>=2.11.7",
    "pydantic-settings>=2.10.1",
    "sqlalchemy>=2.0.43",
    "uvicorn>=0.35.0",
]

# Зависимости, которые нужны только для разработки и тестирования
[project.optional-dependencies]
dev = [
    "ruff",
    "pytest",
]

# Ссылки
[project.urls]
"Homepage" = "https://github.com/alisher-balpisov/delivery_bot_project.git" 

# ==============================================================================
# Конфигурация Ruff (Линтер и Форматтер)
# Документация: https://docs.astral.sh/ruff/
# ==============================================================================
[tool.ruff]
target-version = "py313"
src = ["src"]
line-length = 100

# Список файлов и папок, которые Ruff должен игнорировать.
exclude = [
    ".bzr", ".direnv", ".eggs", ".git", ".hg", ".mypy_cache", ".nox",
    ".pants.d", ".pytype", ".ruff_cache", ".svn", ".tox", ".venv",
    "__pypackages__", "_build", "buck-out", "build", "dist",
    "node_modules", "venv", "migrations",
]

# ------------------------------------------------------------------------------
# Настройки Форматтера (`ruff format`)
# ------------------------------------------------------------------------------
[tool.ruff.format]
# Стиль кавычек. Устанавливаем двойные кавычки как стандарт.
quote-style = "double"

# Пропустить "магическую" висячую запятую. Если `true`, форматтер
# не будет добавлять висячую запятую в выражениях, которые из-за этого
# переносятся на новую строку. Поведение отличается от Black.
skip-magic-trailing-comma = false

# Автоматически форматировать блоки кода внутри docstrings.
docstring-code-format = true

# ------------------------------------------------------------------------------
# Настройки Линтера (`ruff check`)
# ------------------------------------------------------------------------------
[tool.ruff.lint]
# Набор правил для проверки кода. Подробнее: https://docs.astral.sh/ruff/rules/
select = [
    "E",   # pycodestyle (ошибки стиля)
    "W",   # pycodestyle (предупреждения стиля)
    "F",   # Pyflakes (логические ошибки, неиспользуемые импорты/переменные)
    "I",   # isort (сортировка импортов)
    "C4",  # flake8-comprehensions (улучшения для list/dict/set comprehensions)
    "B",   # flake8-bugbear (поиск вероятных багов и сомнительных паттернов)
    "C90", # mccabe (проверка цикломатической сложности)
    "UP",  # pyupgrade (модернизация синтаксиса до новой версии Python)
    "S",   # flake8-bandit (поиск уязвимостей безопасности)
    "RUF", # Специфичные правила Ruff
]

# Правила, которые нужно игнорировать глобально по всему проекту.
ignore = [
    # Длина строки контролируется форматтером, а не линтером.
    "E501",
    # Отключить предупреждение о вызовах функций в качестве аргументов по умолчанию.
    "B008",
    # Сложность кода контролируется отдельно через `lint.mccabe.max-complexity`.
    "C901",
    # Игнорирование неоднозначных кавычек в docstring. Может быть полезно для старых проектов.
    "RUF001",
    "RUF002",
    "RUF003",
]

# Включить автоматическое исправление для всех правил, которые это поддерживают.
fixable = ["ALL"]

# ------------------------------------------------------------------------------
# Настройки для плагинов
# ------------------------------------------------------------------------------
[tool.ruff.lint.isort]
# Если `true`, импорты с висячей запятой разбиваются на несколько строк.
# `false` сохраняет их на одной строке, что делает импорты компактнее.
split-on-trailing-comma = false

# Настройки для проверки сложности кода (плагин mccabe)
[tool.ruff.lint.mccabe]
# Максимальная допустимая цикломатическая сложность для функций.
max-complexity = 10

# ------------------------------------------------------------------------------
# Игнорирование правил для определенных файлов
# ------------------------------------------------------------------------------
[tool.ruff.lint.per-file-ignores]
# В тестах использование `assert` является стандартной практикой.
"tests/*" = ["S101"]

# В `__init__.py` часто импортируют модули, чтобы сделать их доступными
# на уровне пакета. Такие импорты могут помечаться как неиспользуемые (F401).
"__init__.py" = ["F401"]
