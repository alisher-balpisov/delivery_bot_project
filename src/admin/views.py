from fastapi import APIRouter, Depends, HTTPException
from src.admin import service
from src.core.config import is_admin
from src.core.logging import get_logger
from src.schemas.admin import AdminVerificationRequest, OneTimeCodeCreate, OneTimeCodeRead

logger = get_logger(__name__)

router = APIRouter()


def require_admin_verification(admin_data: AdminVerificationRequest) -> int:
    """
    –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.

    Args:
        admin_data: –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

    Returns:
        telegram_id –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –µ—Å–ª–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞

    Raises:
        HTTPException: –ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω
    """
    if not is_admin(admin_data.telegram_id):
        logger.warning(f"‚ùå Unauthorized admin access attempt by ID: {admin_data.telegram_id}")
        raise HTTPException(
            status_code=403, detail="Insufficient permissions. Admin access required."
        )

    logger.info(f"‚úÖ Admin verification successful for user: {admin_data.telegram_id}")
    return admin_data.telegram_id


@router.post("/generate-code", response_model=OneTimeCodeRead, status_code=201)
async def generate_one_time_code(
    admin_data: AdminVerificationRequest,
    code_data: OneTimeCodeCreate,
    admin_id: int = Depends(require_admin_verification),
):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π –∫–æ–¥ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Ä–æ–ª—å—é.
    –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.

    –¢—Ä–µ–±—É–µ—Ç –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —á–µ—Ä–µ–∑ AdminVerificationRequest –≤ —Ç–µ–ª–µ –∑–∞–ø—Ä–æ—Å–∞.
    """
    try:
        logger.info(f"üöÄ Generating OTC by admin {admin_id} for user {code_data.telegram_id}")

        new_code = await service.generate_one_time_code(
            telegram_id=code_data.telegram_id, user_role=code_data.user_role
        )

        logger.info(f"‚úÖ OTC generated successfully for user {code_data.telegram_id}")
        return new_code

    except Exception as e:
        logger.error(f"‚ùå Failed to generate OTC: {e}")
        raise HTTPException(status_code=500, detail="Failed to generate code")


@router.get("/verify-code/{code}", response_model=OneTimeCodeRead)
async def verify_one_time_code(code: str):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π –∫–æ–¥.

    –ö–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 6-–∑–Ω–∞—á–Ω—ã–º —á–∏—Å–ª–æ–º –∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å –≤ Redis.
    –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥ –º–∞—Ä–∫–∏—Ä—É–µ—Ç—Å—è –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π.
    """
    # Basic validation
    if not code.isdigit() or len(code) != 6:
        logger.warning(f"‚ùå Invalid code format: '{code}'")
        raise HTTPException(status_code=400, detail="Invalid code format. Must be 6 digits.")

    try:
        logger.info(f"üîç Verifying code: {code}")

        verified_code = await service.verify_one_time_code(code=code)

        if not verified_code:
            logger.warning(f"‚ùå Code verification failed: {code}")
            raise HTTPException(status_code=404, detail="Invalid or expired code")

        logger.info(f"‚úÖ Code verified successfully: {code}")
        return verified_code

    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå Unexpected error during code verification: {e}")
        raise HTTPException(status_code=500, detail="Internal server error")
