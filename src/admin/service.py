import hashlib
import json
import secrets
import string
from datetime import datetime

import redis.asyncio as redis
from src.core.config import settings
from src.core.logging import get_logger
from src.schemas.admin import OneTimeCodeRead

logger = get_logger(__name__)

# Redis connection
redis_client: redis.Redis | None = None


async def init_redis_client() -> redis.Redis:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏ –≤–æ–∑–≤—Ä–∞—Ç–∏—Ç—å Redis –∫–ª–∏–µ–Ω—Ç."""
    try:
        client = redis.from_url(settings.redis.url, decode_responses=True)
        await client.ping()
        logger.info("‚úÖ Redis connection established for OTC service")
        return client
    except Exception as e:
        logger.error(f"‚ùå Redis connection failed: {e}")
        raise ConnectionError(f"Cannot connect to Redis: {e}")


async def generate_one_time_code(telegram_id: int, user_role: str) -> OneTimeCodeRead:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π –∫–æ–¥ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –≤ Redis.

    Args:
        telegram_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∫–æ–¥.
        user_role: –†–æ–ª—å, –Ω–∞–∑–Ω–∞—á–∞–µ–º–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–æ–¥–∞.

    Returns:
        –°—Ö–µ–º–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–¥–∞.
    """
    try:
        client = await init_redis_client()
        # –ë–æ–ª–µ–µ –±–µ–∑–æ–ø–∞—Å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è
        for _ in range(10):
            code = "".join(secrets.choice(string.digits) for _ in range(6))

            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
            if not await client.exists(f"otc:{code}"):
                break
        else:
            raise RuntimeError("Cannot generate unique code after 10 attempts")

        # –î–æ–±–∞–≤–∏—Ç—å —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        code_hash = hashlib.sha256(f"{code}{telegram_id}".encode()).hexdigest()[:8]

        data = {
            "telegram_id": telegram_id,
            "user_role": user_role,
            "is_used": False,
            "created_at": datetime.now().isoformat(),
            "code_hash": code_hash,  # –î–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        }

        # –°–æ–∫—Ä–∞—Ç–∏—Ç—å TTL –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        await client.setex(f"otc:{code}", 1800, json.dumps(data))  # 30 –º–∏–Ω—É—Ç –≤–º–µ—Å—Ç–æ —á–∞—Å–∞

        logger.info(f"üîë Generated OTC for user {telegram_id} with role {user_role}")
        return OneTimeCodeRead(code=code, user_role=user_role, is_used=False)

    except Exception as e:
        logger.error(f"‚ùå Error generating OTC: {e}")
        raise


async def verify_one_time_code(code: str) -> OneTimeCodeRead | None:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π –∫–æ–¥.

    Args:
        code: –û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π –∫–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.

    Returns:
        –°—Ö–µ–º–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–æ–¥–∞, –µ—Å–ª–∏ –æ–Ω –≤–∞–ª–∏–¥–µ–Ω, –∏–Ω–∞—á–µ None.
    """
    try:
        client = await init_redis_client()

        # Get data from Redis
        data_str = await client.get(f"otc:{code}")
        if not data_str:
            logger.warning(f"‚ùå OTC '{code}' not found or expired")
            return None

        data = json.loads(data_str)

        # Check if already used
        if data.get("is_used", False):
            logger.warning(f"‚ö†Ô∏è OTC '{code}' already used")
            return None

        # Mark as used
        data["is_used"] = True
        await client.setex(f"otc:{code}", 3600, json.dumps(data))

        logger.info(f"‚úÖ OTC '{code}' verified for user {data['telegram_id']}")
        return OneTimeCodeRead(code=code, user_role=data["user_role"], is_used=True)

    except json.JSONDecodeError as e:
        logger.error(f"‚ùå Malformed OTC data for '{code}': {e}")
        return None
    except Exception as e:
        logger.error(f"‚ùå Error verifying OTC '{code}': {e}")
        return None
