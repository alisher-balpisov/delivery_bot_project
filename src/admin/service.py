import json
import secrets
import string

import redis.asyncio as redis
from src.core.config import settings
from src.core.logging import get_logger
from src.schemas.admin import OneTimeCodeRead

logger = get_logger(__name__)

# Redis connection
redis_client: redis.Redis | None = None


async def init_redis_client() -> redis.Redis:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏ –≤–æ–∑–≤—Ä–∞—Ç–∏—Ç—å Redis –∫–ª–∏–µ–Ω—Ç."""
    try:
        client = redis.from_url(settings.redis.url, decode_responses=True)
        await client.ping()
        logger.info("‚úÖ Redis connection established for OTC service")
        return client
    except Exception as e:
        logger.error(f"‚ùå Redis connection failed: {e}")
        raise ConnectionError(f"Cannot connect to Redis: {e}")


async def generate_one_time_code(telegram_id: int, user_role: str) -> OneTimeCodeRead:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π –∫–æ–¥ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –≤ Redis.

    Args:
        telegram_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∫–æ–¥.
        user_role: –†–æ–ª—å, –Ω–∞–∑–Ω–∞—á–∞–µ–º–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–æ–¥–∞.

    Returns:
        –°—Ö–µ–º–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–¥–∞.
    """
    try:
        # Get Redis client
        client = await init_redis_client()

        # Generate unique code with collision check
        max_attempts = 10
        for _ in range(max_attempts):
            code = "".join(secrets.choice(string.digits) for _ in range(6))

            # Check if code exists in Redis
            existing = await client.get(f"otc:{code}")
            if not existing:
                break
        else:
            logger.error("‚ùå Failed to generate unique OTC after multiple attempts")
            raise RuntimeError("Cannot generate unique code")

        # Store in Redis with TTL
        data = {
            "telegram_id": telegram_id,
            "user_role": user_role,
            "is_used": False,
            "created_at": str(__import__("datetime").func.now()),
        }
        await client.setex(f"otc:{code}", 3600, json.dumps(data))

        logger.info(f"üîë Generated OTC: {code} for user {telegram_id} with role {user_role}")
        return OneTimeCodeRead(code=code, user_role=user_role, is_used=False)

    except Exception as e:
        logger.error(f"‚ùå Error generating OTC: {e}")
        raise


async def verify_one_time_code(code: str) -> OneTimeCodeRead | None:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π –∫–æ–¥.

    Args:
        code: –û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π –∫–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.

    Returns:
        –°—Ö–µ–º–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–æ–¥–∞, –µ—Å–ª–∏ –æ–Ω –≤–∞–ª–∏–¥–µ–Ω, –∏–Ω–∞—á–µ None.
    """
    try:
        client = await init_redis_client()

        # Get data from Redis
        data_str = await client.get(f"otc:{code}")
        if not data_str:
            logger.warning(f"‚ùå OTC '{code}' not found or expired")
            return None

        data = json.loads(data_str)

        # Check if already used
        if data.get("is_used", False):
            logger.warning(f"‚ö†Ô∏è OTC '{code}' already used")
            return None

        # Mark as used
        data["is_used"] = True
        await client.setex(f"otc:{code}", 3600, json.dumps(data))

        logger.info(f"‚úÖ OTC '{code}' verified for user {data['telegram_id']}")
        return OneTimeCodeRead(code=code, user_role=data["user_role"], is_used=True)

    except json.JSONDecodeError as e:
        logger.error(f"‚ùå Malformed OTC data for '{code}': {e}")
        return None
    except Exception as e:
        logger.error(f"‚ùå Error verifying OTC '{code}': {e}")
        return None
