"""
–°–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è Delivery Bot.

–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –æ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö:
- –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–æ–≤
- –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∫—É—Ä—å–µ—Ä–∞ –Ω–∞ –∑–∞–∫–∞–∑
- –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–æ—Ä–æ–≤
- –°–∏—Å—Ç–µ–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —á–µ—Ä–µ–∑ Telegram Bot API —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏.
–õ–æ–≥–∏—Ä—É–µ—Ç –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
"""

import asyncio

from aiogram import Bot
from aiogram.exceptions import TelegramBadRequest, TelegramRetryAfter
from src.core.config import settings
from src.core.logging import get_logger
from src.models.user import User

logger = get_logger(__name__)


class NotificationService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."""

    def __init__(self, bot: Bot | None = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.

        Args:
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä Telegram –±–æ—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
        """
        self.bot = bot
        self.max_retries = settings.business.notification_retry_attempts
        self.retry_delay = settings.business.notification_retry_delay

    def set_bot(self, bot: Bot) -> None:
        """
        –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞.

        Args:
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä Telegram –±–æ—Ç–∞ –∏–∑ aiogram
        """
        self.bot = bot
        logger.info("ü§ñ Telegram –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ —Å–µ—Ä–≤–∏—Å—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")

    async def send_bulk_notifications(
        self,
        users: list[User],
        message: str,
        parse_mode: str = settings.telegram.parse_mode,
    ) -> dict[str, bool]:
        """
        –ú–∞—Å—Å–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.

        Args:
            users: –°–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
            message: –¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            parse_mode: –†–µ–∂–∏–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
        """
        results = {}
        for user in users:
            success = await self.send_notification(user, message, parse_mode)
            results[str(user.id)] = success

        logger.info(
            f"üìä –ú–∞—Å—Å–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {sum(results.values())}/{len(users)} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã"
        )
        return results

    async def send_notification(
        self,
        user: User,
        message: str,
        parse_mode: str = settings.telegram.parse_mode,
    ) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏.

        Args:
            user: –ü–æ–ª—É—á–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            message: –¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            parse_mode: –†–µ–∂–∏–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

        Returns:
            True, –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        if not user.telegram_id:
            logger.warning(f"‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç telegram_id")
            return False

        if not self.bot:
            logger.warning("‚ùå Telegram –±–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
            logger.info(f"üìß Notification to user {user.id}: {message}")
            return True

        return await self._send_to_telegram(user.telegram_id, message, parse_mode)

    async def _send_to_telegram(self, telegram_id: int, message: str, parse_mode: str) -> bool:
        """
        –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ Telegram API.

        Args:
            telegram_id: Telegram ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è
            message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            parse_mode: –†–µ–∂–∏–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

        Returns:
            True –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ
        """
        for attempt in range(self.max_retries):
            try:
                await self.bot.send_message(
                    chat_id=telegram_id,
                    text=message,
                    parse_mode=parse_mode,
                    disable_web_page_preview=settings.telegram.disable_web_page_preview,
                )
                logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}")
                return True

            except TelegramRetryAfter as e:
                wait_time = e.retry_after
                logger.warning(f"‚è∞ Retry after {wait_time}s –¥–ª—è {telegram_id}")
                await asyncio.sleep(wait_time)

            except TelegramBadRequest as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ Telegram API –¥–ª—è {telegram_id}: {e}")
                break

            except Exception as e:
                logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
                if attempt < self.max_retries - 1:
                    await asyncio.sleep(self.retry_delay)
                else:
                    logger.error(
                        f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ {self.max_retries} –ø–æ–ø—ã—Ç–æ–∫"
                    )

        return False

    async def notify_order_status_changed(
        self, user: User, order_id: int, new_status: str, **kwargs
    ) -> bool:
        """
        –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞.

        Args:
            user: –ü–æ–ª—É—á–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            order_id: ID –∑–∞–∫–∞–∑–∞
            new_status: –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
            **kwargs: –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã

        Returns:
            True –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ
        """
        emoji = self._get_status_emoji(new_status)
        message = (
            f"{emoji} <b>–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –∏–∑–º–µ–Ω–µ–Ω</b>\n\n"
            f"üì¶ –ó–∞–∫–∞–∑ ‚Ññ{order_id}\n"
            f"üìä –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: <b>{new_status}</b>"
        )

        return await self.send_notification(user, message)

    async def notify_order_assigned(
        self, user: User, order_id: int, courier_name: str, pickup_time: str
    ) -> bool:
        """
        –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –∫—É—Ä—å–µ—Ä–∞ –Ω–∞ –∑–∞–∫–∞–∑.

        Args:
            user: –ü–æ–ª—É—á–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            order_id: ID –∑–∞–∫–∞–∑–∞
            courier_name: –ò–º—è –∫—É—Ä—å–µ—Ä–∞
            pickup_time: –í—Ä–µ–º—è –∑–∞–±–æ—Ä–∞

        Returns:
            True –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ
        """
        message = (
            "üöö <b>–ö—É—Ä—å–µ—Ä –Ω–∞–∑–Ω–∞—á–µ–Ω!</b>\n\n"
            f"üì¶ –ó–∞–∫–∞–∑ ‚Ññ{order_id}\n"
            f"üë§ –ö—É—Ä—å–µ—Ä: {courier_name}\n"
            f"üïê –í—Ä–µ–º—è –∑–∞–±–æ—Ä–∞: {pickup_time}"
        )

        return await self.send_notification(user, message)

    async def notify_order_delivered(self, user: User, order_id: int, delivered_at: str) -> bool:
        """
        –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ—Å—Ç–∞–≤–∫–µ –∑–∞–∫–∞–∑–∞.

        Args:
            user: –ü–æ–ª—É—á–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            order_id: ID –∑–∞–∫–∞–∑–∞
            delivered_at: –í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏

        Returns:
            True –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ
        """
        message = (
            f"‚úÖ <b>–ó–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω!</b>\n\nüì¶ –ó–∞–∫–∞–∑ ‚Ññ{order_id}\nüïê –í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: {delivered_at}"
        )

        return await self.send_notification(user, message)

    async def notify_system_message(
        self, user: User, title: str, content: str, priority: str = "normal"
    ) -> bool:
        """
        –°–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.

        Args:
            user: –ü–æ–ª—É—á–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            title: –ó–∞–≥–æ–ª–æ–≤–æ–∫
            content: –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ
            priority: –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç (high, normal, low)

        Returns:
            True –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ
        """
        emoji_priority = {"high": "üî¥", "normal": "üì¢", "low": "‚ÑπÔ∏è"}.get(priority, "üì¢")
        message = f"{emoji_priority} <b>{title}</b>\n\n{content}"

        return await self.send_notification(user, message)

    def _get_status_emoji(self, status: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å emoji –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞."""
        status_emojis = {
            "created": "üõçÔ∏è",
            "accepted": "üîÑ",
            "picking_up": "üì§",
            "in_progress": "üöö",
            "delivered": "‚úÖ",
            "completed": "üèÅ",
            "cancelled": "‚ùå",
            "disputed": "‚ö†Ô∏è",
        }
        return status_emojis.get(status.lower(), "üìä")


async def initialize_notification_service(app_state) -> None:
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å –±–æ—Ç–æ–º –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.

    Args:
        app_state: FastAPI app.state —Å –±–æ—Ç–æ–º
    """
    if hasattr(app_state, "bot") and app_state.bot:
        notification_service.set_bot(app_state.bot)
        logger.info("‚úÖ –°–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –±–æ—Ç–æ–º")
    else:
        logger.warning("‚ö†Ô∏è –ë–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")


def get_notification_service() -> NotificationService:
    """
    –ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
    """
    return notification_service


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ (–º–æ–∂–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å –±–æ—Ç–æ–º –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ)
notification_service = NotificationService()
