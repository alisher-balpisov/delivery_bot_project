from config import settings
from sqlalchemy import text
from sqlalchemy.ext.asyncio import AsyncSession, create_async_engine
from sqlalchemy.orm import DeclarativeBase, sessionmaker
from src.core.logging import get_logger

logger = get_logger(__name__)

# –°–æ–∑–¥–∞—ë–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –¥–≤–∏–∂–æ–∫ SQLAlchemy
engine = create_async_engine(
    settings.database.URL._secret_value, *settings.database.engine_kwargs()
)

# –§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π
AsyncSessionLocal = sessionmaker(
    bind=engine, class_=AsyncSession, **settings.database.session_kwargs()
)


async def get_db():
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è FastAPI.
    """
    async with AsyncSessionLocal() as session:
        try:
            yield session
            await session.commit()
        except Exception:
            await session.rollback()
            raise
        finally:
            await session.close()


async def create_tables() -> None:
    """
    –°–æ–∑–¥–∞—ë—Ç –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã, –æ–ø–∏—Å–∞–Ω–Ω—ã–µ –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö Base.
    """
    logger.info("üî® –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")

    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)

    logger.info("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")


async def drop_tables() -> None:
    """
    –£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    –û–°–¢–û–†–û–ñ–ù–û: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏!
    """
    if settings.is_production:
        raise RuntimeError("‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª—è—Ç—å —Ç–∞–±–ª–∏—Ü—ã –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ!")

    logger.warning("‚ö†Ô∏è –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")

    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.drop_all)

    logger.info("‚úÖ –¢–∞–±–ª–∏—Ü—ã —É–¥–∞–ª–µ–Ω—ã")


async def check_database_connection() -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.
    """
    try:
        async with engine.begin() as conn:
            await conn.execute(text("SELECT 1"))
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î: {e}")
        return False


async def init_db() -> None:
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    """
    logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")

    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        if not await check_database_connection():
            raise ConnectionError("–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")

        logger.info("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

        # –ò–º–ø–æ—Ä—Ç –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        # –í–ê–ñ–ù–û: –∏–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –∑–¥–µ—Å—å –≤—Å–µ –≤–∞—à–∏ –º–æ–¥–µ–ª–∏
        from src.models.shop import Shop  # noqa
        from src.models.courier import Courier  # noqa
        from src.models.user import User  # noqa
        from src.models.order import Order  # noqa
        from src.models.dispute import Dispute  # noqa
        from src.models.photo_report import PhotoReport  # noqa

        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü (–µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç)
        await create_tables()

        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise


async def close_db() -> None:
    """
    –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    """
    logger.info("üîí –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö...")

    try:
        # –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        await engine.dispose()
        logger.info("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç—ã")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –ë–î: {e}")
        raise


async def reset_database() -> None:
    """
    –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (—É–¥–∞–ª–µ–Ω–∏–µ + —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü).
    –û–°–¢–û–†–û–ñ–ù–û: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏!
    """
    if settings.is_production:
        raise RuntimeError("‚ùå –ù–µ–ª—å–∑—è —Å–±—Ä–∞—Å—ã–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ!")

    logger.warning("üîÑ –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")

    # –ò–º–ø–æ—Ä—Ç –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
    # –í–ê–ñ–ù–û: –∏–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –∑–¥–µ—Å—å –≤—Å–µ –≤–∞—à–∏ –º–æ–¥–µ–ª–∏
    from src.models.shop import Shop  # noqa
    from src.models.courier import Courier  # noqa
    from src.models.user import User  # noqa
    from src.models.order import Order  # noqa
    from src.models.dispute import Dispute  # noqa
    from src.models.photo_report import PhotoReport  # noqa

    await drop_tables()
    await create_tables()

    logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–±—Ä–æ—à–µ–Ω–∞ –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∞")


async def get_db_session() -> AsyncSession:
    """
    –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤–Ω–µ FastAPI.
    –ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–∫—Ä—ã—Ç—å —Å–µ—Å—Å–∏—é –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!

    –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
    async with get_db_session() as session:
        # —Ä–∞–±–æ—Ç–∞ —Å –ë–î
        pass
    """
    return AsyncSessionLocal()


class Base(DeclarativeBase):
    """
    –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö ORM-–º–æ–¥–µ–ª–µ–π.

    –°–æ–¥–µ—Ä–∂–∏—Ç —É–ª—É—á—à–µ–Ω–Ω—ã–π __repr__, –∫–æ—Ç–æ—Ä—ã–π
    –≤—ã–≤–æ–¥–∏—Ç id –∏ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –≤ __repr_attrs__ –ø–æ–ª—è.
    """

    # –ê—Ç—Ä–∏–±—É—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤ __repr__
    __repr_attrs__: tuple[str, ...] = ()
    # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –∑–Ω–∞—á–µ–Ω–∏—è –∞—Ç—Ä–∏–±—É—Ç–∞ –≤ __repr__
    __repr_max_length__: int = 15

    @property
    def _id_str(self) -> str | None:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ id,
        –µ—Å–ª–∏ –∞—Ç—Ä–∏–±—É—Ç 'id' –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏ –Ω–µ None.
        """
        return str(self.id) if getattr(self, "id", None) is not None else None

    @property
    def _repr_attrs_str(self) -> str:
        """
        –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏ –¥–ª—è __repr__.

        –û–±—Ä–µ–∑–∞–µ—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–æ __repr_max_length__.
        –î–ª—è —Å—Ç—Ä–æ–∫ –¥–æ–±–∞–≤–ª—è–µ—Ç –∫–∞–≤—ã—á–∫–∏.
        """
        if not self.__repr_attrs__:
            return ""

        max_length = self.__repr_max_length__
        values: list[str] = []
        single_attr = len(self.__repr_attrs__) == 1

        for key in self.__repr_attrs__:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞—Ç—Ä–∏–±—É—Ç —Ä–µ–∞–ª—å–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if not hasattr(self, key):
                raise KeyError(
                    f"–ù–µ–≤–µ—Ä–Ω—ã–π –∞—Ç—Ä–∏–±—É—Ç '{key}' –≤ __repr_attrs__ –∫–ª–∞—Å—Å–∞ {self.__class__.__name__}"
                )

            val = getattr(self, key)
            is_str = isinstance(val, str)

            val_str = str(val)
            if len(val_str) > max_length:
                val_str = val_str[:max_length] + "..."

            if is_str:
                val_str = f"'{val_str}'"

            values.append(val_str if single_attr else f"{key}:{val_str}")

        return " ".join(values)

    def __repr__(self) -> str:
        """
        –ö—Ä–∞—Å–∏–≤–æ–µ —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏.

        –ü—Ä–∏–º–µ—Ä: <User #1 name:'John'>
        """
        id_part = f"#{self._id_str}" if self._id_str else ""
        attrs_part = f" {self._repr_attrs_str}" if self._repr_attrs_str else ""
        return f"<{self.__class__.__name__} {id_part}{attrs_part}>"


# –≠–∫—Å–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
__all__ = [
    "AsyncSessionLocal",
    "Base",
    "check_database_connection",
    "close_db",
    "create_tables",
    "drop_tables",
    "engine",
    "get_db",
    "get_db_session",
    "init_db",
    "reset_database",
]
