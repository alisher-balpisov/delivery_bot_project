import logging
import logging.handlers
import sys
from pathlib import Path
from typing import ClassVar

from src.core.config import settings


class ColoredFormatter(logging.Formatter):
    """
    –§–æ—Ä–º–∞—Ç—Ç–µ—Ä —Å —Ü–≤–µ—Ç–Ω—ã–º –≤—ã–≤–æ–¥–æ–º –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
    """

    # –¶–≤–µ—Ç–æ–≤—ã–µ –∫–æ–¥—ã ANSI
    COLORS: ClassVar = {
        "DEBUG": "\033[36m",  # Cyan
        "INFO": "\033[32m",  # Green
        "WARNING": "\033[33m",  # Yellow
        "ERROR": "\033[31m",  # Red
        "CRITICAL": "\033[41m",  # Red background
    }
    RESET = "\033[0m"

    def format(self, record):
        # –î–æ–±–∞–≤–ª—è–µ–º —Ü–≤–µ—Ç –∫ —É—Ä–æ–≤–Ω—é –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        if record.levelname in self.COLORS:
            record.levelname = f"{self.COLORS[record.levelname]}{record.levelname}{self.RESET}"

        return super().format(record)


class TelegramFormatter(logging.Formatter):
    """
    –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è –ª–æ–≥–æ–≤ Telegram –±–æ—Ç–∞
    """

    def format(self, record):
        # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π
        emoji_map = {"DEBUG": "üêõ", "INFO": "üìã", "WARNING": "‚ö†Ô∏è", "ERROR": "‚ùå", "CRITICAL": "üö®"}

        emoji = emoji_map.get(record.levelname, "üìã")
        record.emoji = emoji

        return super().format(record)


def setup_console_handler() -> logging.Handler:
    """
    –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
    """
    console_handler = logging.StreamHandler(sys.stdout)

    if settings.debug and sys.stdout.isatty():
        # –¶–≤–µ—Ç–Ω–æ–π –≤—ã–≤–æ–¥ –¥–ª—è —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        formatter = ColoredFormatter(
            fmt=settings.logging.format, datefmt=settings.logging.date_format
        )
    else:
        # –û–±—ã—á–Ω—ã–π –≤—ã–≤–æ–¥ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ –∏–ª–∏ —Ñ–∞–π–ª–æ–≤
        formatter = logging.Formatter(
            fmt=settings.logging.format, datefmt=settings.logging.date_format
        )

    console_handler.setFormatter(formatter)
    console_handler.setLevel(settings.logging.level)

    return console_handler


def setup_file_handler() -> logging.Handler | None:
    """
    –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª
    """
    if not settings.logging.file_path:
        return None

    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    log_file = Path(settings.logging.file_path)
    log_file.parent.mkdir(parents=True, exist_ok=True)

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º RotatingFileHandler –¥–ª—è —Ä–æ—Ç–∞—Ü–∏–∏ –ª–æ–≥–æ–≤
    file_handler = logging.handlers.RotatingFileHandler(
        filename=str(log_file), **settings.logging.handler_kwargs()
    )

    # –ü–æ–¥—Ä–æ–±–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Ñ–∞–π–ª–æ–≤—ã—Ö –ª–æ–≥–æ–≤
    formatter = logging.Formatter(
        fmt=settings.logging.file_format, datefmt=settings.logging.date_format
    )

    file_handler.setFormatter(formatter)
    file_handler.setLevel(settings.logging.level)

    return file_handler


def setup_telegram_handler() -> logging.Handler:
    """
    –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è –ª–æ–≥–æ–≤ Telegram –±–æ—Ç–∞
    """
    # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –ª–æ–≥–æ–≤ –±–æ—Ç–∞ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –ª–æ–≥–æ–≤
    if settings.logging.file_path:
        bot_log_file = Path(settings.logging.file_path).parent / "telegram_bot.log"

        bot_handler = logging.handlers.RotatingFileHandler(
            filename=str(bot_log_file), **settings.logging.handler_kwargs()
        )

        formatter = TelegramFormatter(
            fmt=settings.logging.telegram_format, datefmt=settings.logging.date_format
        )

        bot_handler.setFormatter(formatter)
        bot_handler.setLevel(settings.logging.level)

        return bot_handler

    return None


def setup_error_handler() -> logging.Handler | None:
    """
    –û—Ç–¥–µ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—à–∏–±–æ–∫ (ERROR –∏ CRITICAL)
    """
    if not settings.logging.file_path:
        return None

    error_log_file = Path(settings.logging.file_path).parent / "errors.log"

    error_handler = logging.handlers.RotatingFileHandler(
        filename=str(error_log_file), **settings.logging.handler_kwargs()
    )

    # –¢–æ–ª—å–∫–æ –æ—à–∏–±–∫–∏ –∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è
    error_handler.setLevel(logging.ERROR)

    formatter = logging.Formatter(
        fmt=settings.logging.error_format,
        datefmt=settings.logging.date_format,
    )

    error_handler.setFormatter(formatter)

    return error_handler


def configure_third_party_loggers():
    """
    –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Ä–æ–≤–Ω–µ–π –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
    """
    # SQLAlchemy
    logging.getLogger("sqlalchemy.engine").setLevel(
        getattr(logging, settings.logging.sqlalchemy_level)
    )
    logging.getLogger("sqlalchemy.pool").setLevel(logging.WARNING)
    logging.getLogger("sqlalchemy.dialects").setLevel(logging.WARNING)

    # Aiogram
    logging.getLogger("aiogram").setLevel(getattr(logging, settings.logging.aiogram_level))

    # HTTP –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
    logging.getLogger("httpx").setLevel(logging.WARNING)
    logging.getLogger("httpcore").setLevel(logging.WARNING)

    # Uvicorn
    logging.getLogger("uvicorn.access").setLevel(logging.INFO)
    logging.getLogger("uvicorn.error").setLevel(logging.INFO)

    # –û—Ç–∫–ª—é—á–∞–µ–º —Å–ª–∏—à–∫–æ–º –±–æ–ª—Ç–ª–∏–≤—ã–µ –ª–æ–≥–∏
    logging.getLogger("multipart").setLevel(logging.WARNING)
    logging.getLogger("asyncio").setLevel(logging.WARNING)


def setup_logging() -> None:
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π –ª–æ–≥–≥–µ—Ä
    root_logger = logging.getLogger()

    # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    root_logger.handlers.clear()

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—â–∏–π —É—Ä–æ–≤–µ–Ω—å
    root_logger.setLevel(logging.DEBUG)

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    handlers = []

    # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥
    console_handler = setup_console_handler()
    handlers.append(console_handler)

    # –§–∞–π–ª–æ–≤—ã–π –≤—ã–≤–æ–¥
    file_handler = setup_file_handler()
    if file_handler:
        handlers.append(file_handler)

    # Telegram –ª–æ–≥–∏
    telegram_handler = setup_telegram_handler()
    if telegram_handler:
        handlers.append(telegram_handler)

    # –õ–æ–≥–∏ –æ—à–∏–±–æ–∫
    error_handler = setup_error_handler()
    if error_handler:
        handlers.append(error_handler)

    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫ –∫–æ—Ä–Ω–µ–≤–æ–º—É –ª–æ–≥–≥–µ—Ä—É
    for handler in handlers:
        root_logger.addHandler(handler)

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
    configure_third_party_loggers()

    # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É
    logger = logging.getLogger(__name__)
    logger.info(f"üìù –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ. –£—Ä–æ–≤–µ–Ω—å: {settings.logging.level}")

    if settings.logging.file_path:
        logger.info(f"üìÅ –õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤: {settings.logging.file_path}")

    if settings.debug:
        logger.debug("üêõ –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ –≤–∫–ª—é—á–µ–Ω")


def get_logger(name: str) -> logging.Logger:
    """
    –ü–æ–ª—É—á–∏—Ç—å –ª–æ–≥–≥–µ—Ä —Å –∑–∞–¥–∞–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º

    Args:
        name: –ò–º—è –ª–æ–≥–≥–µ—Ä–∞ (–æ–±—ã—á–Ω–æ __name__)
    """
    return logging.getLogger(name)


# –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
class LogLevel:
    """
    –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è

    –ü—Ä–∏–º–µ—Ä:
    with LogLevel(logging.DEBUG):
        logger.debug("–≠—Ç–æ—Ç –ª–æ–≥ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω")
    """

    def __init__(self, level: int, logger_name: str | None = None):
        self.level = level
        self.logger_name = logger_name
        self.original_level = None
        self.logger = None

    def __enter__(self):
        if self.logger_name:
            self.logger = logging.getLogger(self.logger_name)
        else:
            self.logger = logging.getLogger()

        self.original_level = self.logger.level
        self.logger.setLevel(self.level)

        return self.logger

    def __exit__(self, exc_type, exc_val, exc_tb):
        self.logger.setLevel(self.original_level)


# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–∑–æ–≤–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π
def log_function_calls(logger_name: str | None = None):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–∑–æ–≤–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π

    Args:
        logger_name: –ò–º—è –ª–æ–≥–≥–µ—Ä–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏–º—è –º–æ–¥—É–ª—è —Ñ—É–Ω–∫—Ü–∏–∏)
    """

    def decorator(func):
        import functools
        import time

        @functools.wraps(func)
        async def async_wrapper(*args, **kwargs):
            logger = logging.getLogger(logger_name or func.__module__)

            start_time = time.time()
            logger.debug(f"üîÑ –í—ã–∑–æ–≤ {func.__name__}(args={args}, kwargs={kwargs})")

            try:
                result = await func(*args, **kwargs)
                execution_time = time.time() - start_time
                logger.debug(f"‚úÖ {func.__name__} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∑–∞ {execution_time:.3f}—Å")
                return result
            except Exception as e:
                execution_time = time.time() - start_time
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ {func.__name__} –∑–∞ {execution_time:.3f}—Å: {e}")
                raise

        @functools.wraps(func)
        def sync_wrapper(*args, **kwargs):
            logger = logging.getLogger(logger_name or func.__module__)

            start_time = time.time()
            logger.debug(f"üîÑ –í—ã–∑–æ–≤ {func.__name__}(args={args}, kwargs={kwargs})")

            try:
                result = func(*args, **kwargs)
                execution_time = time.time() - start_time
                logger.debug(f"‚úÖ {func.__name__} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∑–∞ {execution_time:.3f}—Å")
                return result
            except Exception as e:
                execution_time = time.time() - start_time
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ {func.__name__} –∑–∞ {execution_time:.3f}—Å: {e}")
                raise

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π wrapper –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ñ—É–Ω–∫—Ü–∏–∏
        import asyncio

        if asyncio.iscoroutinefunction(func):
            return async_wrapper
        else:
            return sync_wrapper

    return decorator


# –≠–∫—Å–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
__all__ = [
    "ColoredFormatter",
    "LogLevel",
    "TelegramFormatter",
    "get_logger",
    "log_function_calls",
    "setup_logging",
]
